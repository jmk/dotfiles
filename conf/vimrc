" Configuration file for vim

" Load pathogen
call pathogen#infect()

" Enable modelines
set modeline
set modelines=5

" Normally we use vim-extensions. If you want true vi-compatibility
" remove change the following statements
set nocompatible	" Use Vim defaults instead of 100% vi compatibility
set backspace=indent,eol,start	" more powerful backspacing


" Now we set some defaults for the editor 
set autoindent		" always set autoindenting on
set textwidth=78	" wrap words at 80 chars
set nobackup		" Don't keep a backup file
set viminfo='20,\"50	" read/write a .viminfo file, don't store more than
			" 50 lines of registers
set history=50		" keep 50 lines of command line history
set ruler		" show the cursor position all the time

" Enable cursorline only in active window
augroup CursorLineOnlyInActiveWindow
  autocmd!
  autocmd VimEnter,WinEnter,BufWinEnter * setlocal cursorline
  autocmd WinLeave * setlocal nocursorline

  " Hack to make "todo" text have priority over the cursorline
  autocmd Syntax * call matchadd('Todo', '\W\zs\(TODO\|FIXME\|XXX\|BUG\|HACK\)', -100)
augroup END

" Suffixes that get lower priority when doing tab completion for filenames.
" These are files we are not likely to want to edit or read.
set suffixes=.bak,~,.swp,.o,.info,.aux,.log,.dvi,.bbl,.blg,.brf,.cb,.ind,.idx,.ilg,.inx,.out,.toc

" We know xterm-debian is a color terminal
if &term =~ "xterm-debian" || &term =~ "xterm-xfree86"
  set t_Co=16
  set t_Sf=[3%dm
  set t_Sb=[4%dm
endif

" Make p in Visual mode replace the selected text with the "" register.
vnoremap p <Esc>:let current_reg = @"<CR>gvdi<C-R>=current_reg<CR><Esc>

" Vim5 and later versions support syntax highlighting. Uncommenting the next
" line enables syntax highlighting by default.
syntax on

" Debian uses compressed helpfiles. We must inform vim that the main
" helpfiles is compressed. Other helpfiles are stated in the tags-file.
"set helpfile=$VIMRUNTIME/doc/help.txt.gz

if has("autocmd")
 " Enabled file type detection
 " Use the default filetype settings. If you also want to load indent files
 " to automatically do language-dependent indenting add 'indent' as well.
filetype plugin on
filetype indent on

endif " has ("autocmd")

" The following are commented out as they cause vim to behave a lot
" different from regular vi. They are highly recommended though.
set showcmd		" Show (partial) command in status line.
set showmatch		" Show matching brackets.
set noignorecase	" Do case sensitive matching
set incsearch		" Incremental search
set autowrite		" Automatically save before commands like :next and :make



"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Vim customizations
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
set hidden
set nowrap
set ruler
set backspace=2
set nocp
set wildmode=longest,list
set nosi
set ai
set wrap
set nu
set nohlsearch
set lbr
set shiftwidth=4
set incsearch

" Show fancy status bar, including buffer number
set laststatus=2
set statusline=%<[%n]\ %f\ %h%m%r%=%-14.(%l,%c%V%)\ %P

" Nice folding settings
"set foldmethod=syntax
"highlight Folded term=none cterm=none ctermfg=4 ctermbg=0
"highlight FoldColumn term=none cterm=none ctermfg=4 ctermbg=0
"nnoremap <silent> <space> :exe 'silent! normal! za'.(foldlevel('.')?'':'l')<cr>

map <up> gk
map <down> gj

au BufEnter   *.c,*.h,*.m,*.cpp :set cindent shiftwidth=4
au BufEnter   *.m,*.mm :set ft=objc
au BufEnter   *.menva*,*.usd,*.usda  :set ft=menva
au BufEnter   *.ypp  :set ft=lex
au BufEnter   *.as :set ft=javascript
au BufEnter   *.fs :set ft=glsl
au BufEnter   *.sl :set ft=sl
au BufEnter   *.pde :set ft=c   " for arduino
au BufEnter   *.markdown,*.md :set ft=markdown tw=0 wrap lbr nolist
au BufEnter   *.txt :set tw=0 wrap lbr nolist
au BufEnter   *.rib :set ts=4
au BufEnter   *.slim :set ft=tcl
au BufEnter   *.pro :set ft=confg   " for qmake project files
au BufReadPre *.m,*.mm :set ft=objc

if (has("mac"))
    au BufEnter   *.h,*.m,*.mm,*.pch :set ft=objcpp
endif

" SCons files
au BufEnter   SConscript,SConstruct :set ft=python

" Certain files want tabs
au BufEnter   tmp.* :setlocal noexpandtab sts=8    " perforce change spec
au BufEnter   *.pbxproj :setlocal noexpandtab sts=8
au BufEnter   Makefile :setlocal noexpandtab sts=8

" Super hack for some files
au BufEnter   *Proto_h,*Proto_cpp :setlocal ft=cpp    " Gf proto files
au BufEnter   *.sip :setlocal ft=cpp                  " sip

" Set some format options
"   c: auto-wrap commens
"   r: auto-insert comment leader
"   o: auto-insert comment leader (when hitting 'o')
"   q: allow formatting of comments with "gq"
"   l: don't break pre-existing long lines
"   t: auto-wrap text with tw
" XXX: do this on BufEnter *after* setting filetype, because something keeps
" resetting?
au BufEnter   * :set fo=crqlt

syntax on

" Make tab characters visible
set list
set lcs=tab:,.,trail:.

" If multi-byte is available, use vertical line char for vertical splits
if (has("multi_byte"))
    set encoding=utf-8
    set fcs=vert:â•‘,fold:-
    set fcs=vert:â”‚,fold:-
endif

" Use spaces instead of tab characters
set expandtab
set tabstop=8
set softtabstop=4

" XXX: move to colorscheme?
" Make comments really easy to read
hi Comment ctermfg=Cyan ctermbg=Blue cterm=NONE

hi Directory ctermfg=Cyan cterm=none

" Make line numbers a little more sutble
hi LineNr cterm=NONE

" Make matching parens stick out
hi MatchParen ctermfg=Magenta ctermbg=Blue

" Other colors to match style
hi PreProc ctermfg=Magenta cterm=NONE
hi Constant ctermfg=Red cterm=NONE
hi Todo ctermfg=red ctermbg=yellow cterm=bold

" Make visible whitespace bold
hi SpecialKey ctermfg=blue cterm=bold

" Vertical split white on black
hi VertSplit	ctermbg=white ctermfg=black

" Cursor line no style
hi CursorLine	cterm=none

" Shortcuts for tabs
map <C-N> :tabn <CR>
map <C-P> :tabp <CR>

" Nice tab titles (gtl is only for GUIs)
set tabline=%n\ %t\ %m

" File browser dialogs default to the buffer location
set bsdir=buffer

" Cdpaths because I'm lazy
let &cdpath = ". " . $cdpath

" Automatically switch cwd to follow buffers
if exists('+autochdir')
    set autochdir
else
    autocmd BufEnter * silent! lcd %:p:h:gs/ /\\ /
endif

" Custom commands implemented in python
if has("python")
    " ctrl-H switches between *.cpp and *.h (in the same dir)
    source ~/.vimpython
    map <C-H> :python switchHeader() <CR>

    " tab key expands C++ method definitions for selected range
    vmap <C-I> :python expandClassMethods() <CR>

    " comment/uncomment
    map <S-C> :python commentLines() <CR>
    map <S-U> :python uncommentLines() <CR>
endif

" Don't wrap files with lots of data by default
au FileType rib,menva setlocal nowrap ts=4

" Support doxygen three-slash comments
au FileType c,cpp setlocal comments^=:///

" Quick toggle hlsearch on tab key
nmap <C-I> :set hlsearch! hlsearch? <CR>

" Quick fix mode
" XXX: how to change this dynamically?
set makeprg=nice\ scons\ -u\ install
map <C-B> :make <CR>

" Setup C indentation options (cinoptions) as follows:
"     - Wrap arguments to match location of opening parens: (0
"     - Indent argument lists that start on a separate line: Ws (shiftwidth)
"     - Don't indent C++ class scope declarations: g0
"     - Align case statements with braces: l1
set cino=(0,Ws,g0,l1

" Don't flag curly braces inside of parens as errors in C-style syntax
let c_no_curly_error=1

" Automatically insert closing parens/brackets
"inoremap { {<CR>}<ESC>O
"inoremap ( ()<ESC>i
"inoremap [ []<ESC>i
"autocmd Syntax html,vim inoremap < <lt>><ESC>i| inoremap > <c-r>=ClosePair('>')<CR>
"inoremap ) <c-r>=ClosePair(')')<CR>
"inoremap ] <c-r>=ClosePair(']')<CR>

"function ClosePair(char) 
"  if getline('.')[col('.') - 1] == a:char 
"    return "\<Right>" 
"  else 
"    return a:char 
"endf 
